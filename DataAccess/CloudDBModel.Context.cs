//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CheckinPortal.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SwissotelStamfordEntities : DbContext
    {
        public SwissotelStamfordEntities()
            : base("name=SwissotelStamfordEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbCountryMaster> tbCountryMasters { get; set; }
        public virtual DbSet<tbDocumentMaster> tbDocumentMasters { get; set; }
        public virtual DbSet<tbEventModuleMaster> tbEventModuleMasters { get; set; }
        public virtual DbSet<tbEventSubModuleMaster> tbEventSubModuleMasters { get; set; }
        public virtual DbSet<tbEventTrackingDetail> tbEventTrackingDetails { get; set; }
        public virtual DbSet<tbFeedBackResult> tbFeedBackResults { get; set; }
        public virtual DbSet<tbKeyStorageManagement> tbKeyStorageManagements { get; set; }
        public virtual DbSet<tbPackageMaster> tbPackageMasters { get; set; }
        public virtual DbSet<tbProfileDetail> tbProfileDetails { get; set; }
        public virtual DbSet<tbProfileDocument> tbProfileDocuments { get; set; }
        public virtual DbSet<tbQuestionMaster> tbQuestionMasters { get; set; }
        public virtual DbSet<tbRequestDetail> tbRequestDetails { get; set; }
        public virtual DbSet<tbRequestMaster> tbRequestMasters { get; set; }
        public virtual DbSet<tbReservationDetail> tbReservationDetails { get; set; }
        public virtual DbSet<tbReservationDocument> tbReservationDocuments { get; set; }
        public virtual DbSet<tbReservationDocumentTypeMaster> tbReservationDocumentTypeMasters { get; set; }
        public virtual DbSet<tbReservationPackageDetail> tbReservationPackageDetails { get; set; }
        public virtual DbSet<tbReservationRateDetail> tbReservationRateDetails { get; set; }
        public virtual DbSet<tbStateMaster> tbStateMasters { get; set; }
        public virtual DbSet<tbPaymentAdditionalInfo> tbPaymentAdditionalInfoes { get; set; }
        public virtual DbSet<tbPaymentHistory> tbPaymentHistories { get; set; }
        public virtual DbSet<tbRoomTypeMapping> tbRoomTypeMappings { get; set; }
        public virtual DbSet<tbRoomTypeMaster> tbRoomTypeMasters { get; set; }
        public virtual DbSet<tbPaymentHeader> tbPaymentHeaders { get; set; }
        public virtual DbSet<tbOperaPaymentTypeCodeWeb> tbOperaPaymentTypeCodeWebs { get; set; }
    
        public virtual int CloseKeys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloseKeys");
        }
    
        public virtual int OpenKeys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpenKeys");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Usp_BulkUpdateLocallyPushedReservations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_BulkUpdateLocallyPushedReservations");
        }
    
        public virtual int usp_DeleteTransactionsByReservationID(string reservationNumber)
        {
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteTransactionsByReservationID", reservationNumberParameter);
        }
    
        public virtual ObjectResult<usp_FetchReservationforLocalPush_Result> usp_FetchReservationforLocalPush(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchReservationforLocalPush_Result>("usp_FetchReservationforLocalPush", reservationNameIDParameter);
        }
    
        public virtual ObjectResult<Usp_InsertFeedbackData_Result> Usp_InsertFeedbackData(Nullable<int> reservationID, Nullable<int> questionID, string answer)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_InsertFeedbackData_Result>("Usp_InsertFeedbackData", reservationIDParameter, questionIDParameter, answerParameter);
        }
    
        public virtual int usp_InsertReservationDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReservationDetails");
        }
    
        public virtual int Usp_UpdateReservationByGuest(Nullable<int> reservationID, string eTA, string flightNo, Nullable<int> profileDetailID, string membershipNo, string email, string phone, string addressLine1, string addressLine2, string city, Nullable<int> stateMasterID, string postalCode, Nullable<int> countryMasterID, byte[] signatureImage, byte[] documentImage1, byte[] documentImage2, byte[] documentImage3, byte[] faceImage, Nullable<bool> isMemberShipEnrolled, string type, Nullable<int> documentID, string documentNumber, Nullable<System.DateTime> expiryDate, Nullable<System.DateTime> issueDate, string gender, string issueCountry)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var eTAParameter = eTA != null ?
                new ObjectParameter("ETA", eTA) :
                new ObjectParameter("ETA", typeof(string));
    
            var flightNoParameter = flightNo != null ?
                new ObjectParameter("FlightNo", flightNo) :
                new ObjectParameter("FlightNo", typeof(string));
    
            var profileDetailIDParameter = profileDetailID.HasValue ?
                new ObjectParameter("ProfileDetailID", profileDetailID) :
                new ObjectParameter("ProfileDetailID", typeof(int));
    
            var membershipNoParameter = membershipNo != null ?
                new ObjectParameter("MembershipNo", membershipNo) :
                new ObjectParameter("MembershipNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateMasterIDParameter = stateMasterID.HasValue ?
                new ObjectParameter("StateMasterID", stateMasterID) :
                new ObjectParameter("StateMasterID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryMasterIDParameter = countryMasterID.HasValue ?
                new ObjectParameter("CountryMasterID", countryMasterID) :
                new ObjectParameter("CountryMasterID", typeof(int));
    
            var signatureImageParameter = signatureImage != null ?
                new ObjectParameter("SignatureImage", signatureImage) :
                new ObjectParameter("SignatureImage", typeof(byte[]));
    
            var documentImage1Parameter = documentImage1 != null ?
                new ObjectParameter("DocumentImage1", documentImage1) :
                new ObjectParameter("DocumentImage1", typeof(byte[]));
    
            var documentImage2Parameter = documentImage2 != null ?
                new ObjectParameter("DocumentImage2", documentImage2) :
                new ObjectParameter("DocumentImage2", typeof(byte[]));
    
            var documentImage3Parameter = documentImage3 != null ?
                new ObjectParameter("DocumentImage3", documentImage3) :
                new ObjectParameter("DocumentImage3", typeof(byte[]));
    
            var faceImageParameter = faceImage != null ?
                new ObjectParameter("FaceImage", faceImage) :
                new ObjectParameter("FaceImage", typeof(byte[]));
    
            var isMemberShipEnrolledParameter = isMemberShipEnrolled.HasValue ?
                new ObjectParameter("IsMemberShipEnrolled", isMemberShipEnrolled) :
                new ObjectParameter("IsMemberShipEnrolled", typeof(bool));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var issueCountryParameter = issueCountry != null ?
                new ObjectParameter("IssueCountry", issueCountry) :
                new ObjectParameter("IssueCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateReservationByGuest", reservationIDParameter, eTAParameter, flightNoParameter, profileDetailIDParameter, membershipNoParameter, emailParameter, phoneParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateMasterIDParameter, postalCodeParameter, countryMasterIDParameter, signatureImageParameter, documentImage1Parameter, documentImage2Parameter, documentImage3Parameter, faceImageParameter, isMemberShipEnrolledParameter, typeParameter, documentIDParameter, documentNumberParameter, expiryDateParameter, issueDateParameter, genderParameter, issueCountryParameter);
        }
    
        public virtual ObjectResult<usp_GetReservationDetails_Result> usp_GetReservationDetails(string reservationNumber)
        {
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReservationDetails_Result>("usp_GetReservationDetails", reservationNumberParameter);
        }
    
        public virtual ObjectResult<Usp_GetQuestionMaster_Result> Usp_GetQuestionMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetQuestionMaster_Result>("Usp_GetQuestionMaster");
        }
    
        public virtual ObjectResult<Usp_GetProfileInformationByReservationID_Result> Usp_GetProfileInformationByReservationID(Nullable<int> reservationDetailID)
        {
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetProfileInformationByReservationID_Result>("Usp_GetProfileInformationByReservationID", reservationDetailIDParameter);
        }
    
        public virtual ObjectResult<Usp_GetPackageMaster_Result> Usp_GetPackageMaster(string roomTypeCode)
        {
            var roomTypeCodeParameter = roomTypeCode != null ?
                new ObjectParameter("RoomTypeCode", roomTypeCode) :
                new ObjectParameter("RoomTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetPackageMaster_Result>("Usp_GetPackageMaster", roomTypeCodeParameter);
        }
    
        public virtual ObjectResult<Usp_GetProfileDocumentsByReservationID_Result> Usp_GetProfileDocumentsByReservationID(Nullable<int> reservationDetailID)
        {
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetProfileDocumentsByReservationID_Result>("Usp_GetProfileDocumentsByReservationID", reservationDetailIDParameter);
        }
    
        public virtual ObjectResult<Usp_InsertPackageMaster_Result> Usp_InsertPackageMaster(Nullable<int> packageID, string packageCode, string packageName, Nullable<decimal> packageAmount, string packageDesc, byte[] packageImage, Nullable<bool> isActive, Nullable<bool> isRoomUpsell, string units)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var packageCodeParameter = packageCode != null ?
                new ObjectParameter("PackageCode", packageCode) :
                new ObjectParameter("PackageCode", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var packageAmountParameter = packageAmount.HasValue ?
                new ObjectParameter("PackageAmount", packageAmount) :
                new ObjectParameter("PackageAmount", typeof(decimal));
    
            var packageDescParameter = packageDesc != null ?
                new ObjectParameter("PackageDesc", packageDesc) :
                new ObjectParameter("PackageDesc", typeof(string));
    
            var packageImageParameter = packageImage != null ?
                new ObjectParameter("PackageImage", packageImage) :
                new ObjectParameter("PackageImage", typeof(byte[]));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isRoomUpsellParameter = isRoomUpsell.HasValue ?
                new ObjectParameter("IsRoomUpsell", isRoomUpsell) :
                new ObjectParameter("IsRoomUpsell", typeof(bool));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_InsertPackageMaster_Result>("Usp_InsertPackageMaster", packageIDParameter, packageCodeParameter, packageNameParameter, packageAmountParameter, packageDescParameter, packageImageParameter, isActiveParameter, isRoomUpsellParameter, unitsParameter);
        }
    
        public virtual ObjectResult<Usp_InsertReservationPackageDetails_Result> Usp_InsertReservationPackageDetails(Nullable<int> reservationDetailID, Nullable<int> packageID)
        {
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_InsertReservationPackageDetails_Result>("Usp_InsertReservationPackageDetails", reservationDetailIDParameter, packageIDParameter);
        }
    
        public virtual ObjectResult<usp_FetchProfileDocumentsforLocalPush_Result> usp_FetchProfileDocumentsforLocalPush(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchProfileDocumentsforLocalPush_Result>("usp_FetchProfileDocumentsforLocalPush", reservationNameIDParameter);
        }
    
        public virtual ObjectResult<usp_FetchReservationFeedBackforLocalPush_Result> usp_FetchReservationFeedBackforLocalPush()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchReservationFeedBackforLocalPush_Result>("usp_FetchReservationFeedBackforLocalPush");
        }
    
        public virtual ObjectResult<usp_FetchReservationPackageforLocalPush_Result> usp_FetchReservationPackageforLocalPush()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchReservationPackageforLocalPush_Result>("usp_FetchReservationPackageforLocalPush");
        }
    
        public virtual ObjectResult<Usp_InsertEventsTracking_Result> Usp_InsertEventsTracking(Nullable<int> reservationID, string eventSubModule)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var eventSubModuleParameter = eventSubModule != null ?
                new ObjectParameter("EventSubModule", eventSubModule) :
                new ObjectParameter("EventSubModule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_InsertEventsTracking_Result>("Usp_InsertEventsTracking", reservationIDParameter, eventSubModuleParameter);
        }
    
        public virtual int Usp_BulkUpdateCheckOutReservations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_BulkUpdateCheckOutReservations");
        }
    
        public virtual int usp_InsertReservationDetailsCheckOut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReservationDetailsCheckOut");
        }
    
        public virtual int Usp_UpdatePreCheckOutFlag(Nullable<int> reservationDetailID)
        {
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdatePreCheckOutFlag", reservationDetailIDParameter);
        }
    
        public virtual ObjectResult<Usp_ClearCloudData_Result> Usp_ClearCloudData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_ClearCloudData_Result>("Usp_ClearCloudData");
        }
    
        public virtual ObjectResult<usp_FetchReservationDocumentsforLocalPushCheckOut_Result> usp_FetchReservationDocumentsforLocalPushCheckOut(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchReservationDocumentsforLocalPushCheckOut_Result>("usp_FetchReservationDocumentsforLocalPushCheckOut", reservationNameIDParameter);
        }
    
        public virtual ObjectResult<usp_FetchReservationforLocalPushCheckOut_Result> usp_FetchReservationforLocalPushCheckOut(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchReservationforLocalPushCheckOut_Result>("usp_FetchReservationforLocalPushCheckOut", reservationNameIDParameter);
        }
    
        public virtual ObjectResult<USp_GetPackageMasterDetailedList_Result> USp_GetPackageMasterDetailedList(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USp_GetPackageMasterDetailedList_Result>("USp_GetPackageMasterDetailedList", packageIDParameter);
        }
    
        public virtual ObjectResult<Usp_GetRoomTypeMaster_Result> Usp_GetRoomTypeMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetRoomTypeMaster_Result>("Usp_GetRoomTypeMaster");
        }
    
        public virtual int Usp_InsertPaymentDetails(string transactionID, string reservationNumber, string reservationNameID, string maskedCardNumber, string expiryDate, string fundingSource, string amount, string currency, string recurringIdentifier, string authorisationCode, string pspReferenceNumber, string parentPspRefereceNumber, string transactionType, string resultCode, string responseMessage, string cardType)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            var maskedCardNumberParameter = maskedCardNumber != null ?
                new ObjectParameter("MaskedCardNumber", maskedCardNumber) :
                new ObjectParameter("MaskedCardNumber", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var fundingSourceParameter = fundingSource != null ?
                new ObjectParameter("FundingSource", fundingSource) :
                new ObjectParameter("FundingSource", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var recurringIdentifierParameter = recurringIdentifier != null ?
                new ObjectParameter("RecurringIdentifier", recurringIdentifier) :
                new ObjectParameter("RecurringIdentifier", typeof(string));
    
            var authorisationCodeParameter = authorisationCode != null ?
                new ObjectParameter("AuthorisationCode", authorisationCode) :
                new ObjectParameter("AuthorisationCode", typeof(string));
    
            var pspReferenceNumberParameter = pspReferenceNumber != null ?
                new ObjectParameter("pspReferenceNumber", pspReferenceNumber) :
                new ObjectParameter("pspReferenceNumber", typeof(string));
    
            var parentPspRefereceNumberParameter = parentPspRefereceNumber != null ?
                new ObjectParameter("ParentPspRefereceNumber", parentPspRefereceNumber) :
                new ObjectParameter("ParentPspRefereceNumber", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var resultCodeParameter = resultCode != null ?
                new ObjectParameter("ResultCode", resultCode) :
                new ObjectParameter("ResultCode", typeof(string));
    
            var responseMessageParameter = responseMessage != null ?
                new ObjectParameter("ResponseMessage", responseMessage) :
                new ObjectParameter("ResponseMessage", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertPaymentDetails", transactionIDParameter, reservationNumberParameter, reservationNameIDParameter, maskedCardNumberParameter, expiryDateParameter, fundingSourceParameter, amountParameter, currencyParameter, recurringIdentifierParameter, authorisationCodeParameter, pspReferenceNumberParameter, parentPspRefereceNumberParameter, transactionTypeParameter, resultCodeParameter, responseMessageParameter, cardTypeParameter);
        }
    
        public virtual ObjectResult<Usp_InsertRoomTypeMaster_Result> Usp_InsertRoomTypeMaster(string roomTypeCode, string roomTypeDescription)
        {
            var roomTypeCodeParameter = roomTypeCode != null ?
                new ObjectParameter("RoomTypeCode", roomTypeCode) :
                new ObjectParameter("RoomTypeCode", typeof(string));
    
            var roomTypeDescriptionParameter = roomTypeDescription != null ?
                new ObjectParameter("RoomTypeDescription", roomTypeDescription) :
                new ObjectParameter("RoomTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_InsertRoomTypeMaster_Result>("Usp_InsertRoomTypeMaster", roomTypeCodeParameter, roomTypeDescriptionParameter);
        }
    
        public virtual ObjectResult<Usp_GetPaymentHistory_Result> Usp_GetPaymentHistory(string reservationNumber)
        {
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetPaymentHistory_Result>("Usp_GetPaymentHistory", reservationNumberParameter);
        }
    
        public virtual ObjectResult<usp_InsertPaymentHistory_Result> usp_InsertPaymentHistory(string transactionID, string reservationNameID, string reservationNumber, string pData, string mDData, string paRes, string pSPReference, string resultCode, string refusalReason, string transactionType)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            var pDataParameter = pData != null ?
                new ObjectParameter("PData", pData) :
                new ObjectParameter("PData", typeof(string));
    
            var mDDataParameter = mDData != null ?
                new ObjectParameter("MDData", mDData) :
                new ObjectParameter("MDData", typeof(string));
    
            var paResParameter = paRes != null ?
                new ObjectParameter("PaRes", paRes) :
                new ObjectParameter("PaRes", typeof(string));
    
            var pSPReferenceParameter = pSPReference != null ?
                new ObjectParameter("PSPReference", pSPReference) :
                new ObjectParameter("PSPReference", typeof(string));
    
            var resultCodeParameter = resultCode != null ?
                new ObjectParameter("ResultCode", resultCode) :
                new ObjectParameter("ResultCode", typeof(string));
    
            var refusalReasonParameter = refusalReason != null ?
                new ObjectParameter("RefusalReason", refusalReason) :
                new ObjectParameter("RefusalReason", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InsertPaymentHistory_Result>("usp_InsertPaymentHistory", transactionIDParameter, reservationNameIDParameter, reservationNumberParameter, pDataParameter, mDDataParameter, paResParameter, pSPReferenceParameter, resultCodeParameter, refusalReasonParameter, transactionTypeParameter);
        }
    
        public virtual ObjectResult<usp_FetchPaymentAdditionalInfoforLocalPush_Result> usp_FetchPaymentAdditionalInfoforLocalPush(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchPaymentAdditionalInfoforLocalPush_Result>("usp_FetchPaymentAdditionalInfoforLocalPush", reservationNameIDParameter);
        }
    
        public virtual int usp_FetchPaymentforLocalPush(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FetchPaymentforLocalPush", reservationNameIDParameter);
        }
    
        public virtual ObjectResult<usp_FetchPaymentHistoryforLocalPush_Result> usp_FetchPaymentHistoryforLocalPush(string reservationNameID)
        {
            var reservationNameIDParameter = reservationNameID != null ?
                new ObjectParameter("ReservationNameID", reservationNameID) :
                new ObjectParameter("ReservationNameID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchPaymentHistoryforLocalPush_Result>("usp_FetchPaymentHistoryforLocalPush", reservationNameIDParameter);
        }
    
        public virtual ObjectResult<Usp_usp_FetchReservationPaymentAdditionalInfoforLocalPush_Result> Usp_usp_FetchReservationPaymentAdditionalInfoforLocalPush()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_usp_FetchReservationPaymentAdditionalInfoforLocalPush_Result>("Usp_usp_FetchReservationPaymentAdditionalInfoforLocalPush");
        }
    
        public virtual ObjectResult<Usp_usp_FetchReservationPaymentHeaderforLocalPush_Result> Usp_usp_FetchReservationPaymentHeaderforLocalPush()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_usp_FetchReservationPaymentHeaderforLocalPush_Result>("Usp_usp_FetchReservationPaymentHeaderforLocalPush");
        }
    
        public virtual ObjectResult<Usp_usp_FetchReservationPaymentHistoryforLocalPush_Result> Usp_usp_FetchReservationPaymentHistoryforLocalPush()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_usp_FetchReservationPaymentHistoryforLocalPush_Result>("Usp_usp_FetchReservationPaymentHistoryforLocalPush");
        }
    
        public virtual ObjectResult<Usp_GetActivePaymentTransctions_Result> Usp_GetActivePaymentTransctions(string reservationNumber)
        {
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetActivePaymentTransctions_Result>("Usp_GetActivePaymentTransctions", reservationNumberParameter);
        }
    
        public virtual int Usp_InsertPaymentTransactionsFromLocal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertPaymentTransactionsFromLocal");
        }
    
        public virtual int Usp_UpdateEmailIDByReservationID(Nullable<int> reservationID, string email)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateEmailIDByReservationID", reservationIDParameter, emailParameter);
        }
    
        public virtual ObjectResult<Usp_UpdatePaymentHeader_Result> Usp_UpdatePaymentHeader(string transactionID, Nullable<bool> isActive, string resultCode, string responseMessage, string transactionType)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var resultCodeParameter = resultCode != null ?
                new ObjectParameter("ResultCode", resultCode) :
                new ObjectParameter("ResultCode", typeof(string));
    
            var responseMessageParameter = responseMessage != null ?
                new ObjectParameter("ResponseMessage", responseMessage) :
                new ObjectParameter("ResponseMessage", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_UpdatePaymentHeader_Result>("Usp_UpdatePaymentHeader", transactionIDParameter, isActiveParameter, resultCodeParameter, responseMessageParameter, transactionTypeParameter);
        }
    }
}
